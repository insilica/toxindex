steps:
  # ===== BACKEND DEPLOYMENT =====
  
  # Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: [
      'build',
      '-t', 'us-docker.pkg.dev/$PROJECT_ID/toxindex-backend/backend:latest',
      '.'
    ]

  # Push the Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-docker.pkg.dev/$PROJECT_ID/toxindex-backend/backend:latest']

  # Get GKE credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'container', 'clusters', 'get-credentials',
      'toxindex-gke',
      '--region=us-east4',
      '--project=$PROJECT_ID'
    ]

  # Update backend deployment
  - name: 'gcr.io/cloud-builders/kubectl'
    args: [
      'set', 'image', 'deployment/backend',
      'backend=us-docker.pkg.dev/$PROJECT_ID/toxindex-backend/backend:latest',
      '-n', 'toxindex-app'
    ]
    env:
      - 'CLOUDSDK_COMPUTE_REGION=us-east4'
      - 'CLOUDSDK_CONTAINER_CLUSTER=toxindex-gke'

  # Restart backend deployment
  - name: 'gcr.io/cloud-builders/kubectl'
    args: [
      'rollout', 'restart', 'deployment/backend',
      '-n', 'toxindex-app'
    ]
    env:
      - 'CLOUDSDK_COMPUTE_REGION=us-east4'
      - 'CLOUDSDK_CONTAINER_CLUSTER=toxindex-gke'

  # Wait for backend rollout
  - name: 'gcr.io/cloud-builders/kubectl'
    args: [
      'rollout', 'status', 'deployment/backend',
      '-n', 'toxindex-app'
    ]
    env:
      - 'CLOUDSDK_COMPUTE_REGION=us-east4'
      - 'CLOUDSDK_CONTAINER_CLUSTER=toxindex-gke'

  # Restart Celery worker
  - name: 'gcr.io/cloud-builders/kubectl'
    args: [
      'rollout', 'restart', 'deployment/celery-worker',
      '-n', 'toxindex-app'
    ]
    env:
      - 'CLOUDSDK_COMPUTE_REGION=us-east4'
      - 'CLOUDSDK_CONTAINER_CLUSTER=toxindex-gke'

  # Wait for Celery worker rollout
  - name: 'gcr.io/cloud-builders/kubectl'
    args: [
      'rollout', 'status', 'deployment/celery-worker',
      '-n', 'toxindex-app'
    ]
    env:
      - 'CLOUDSDK_COMPUTE_REGION=us-east4'
      - 'CLOUDSDK_CONTAINER_CLUSTER=toxindex-gke'

  # ===== FRONTEND DEPLOYMENT =====

  # Install Node.js
  - name: 'gcr.io/cloud-builders/npm'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
        apt-get install -y nodejs
        npm --version
        node --version

  # Install dependencies
  - name: 'gcr.io/cloud-builders/npm'
    args: ['ci']
    dir: 'frontend'

  # Build the frontend
  - name: 'gcr.io/cloud-builders/npm'
    args: ['run', 'build']
    dir: 'frontend'
    env:
      - 'CI=false'

  # Sync to GCS bucket
  - name: 'gcr.io/cloud-builders/gsutil'
    args: [
      '-m', 'rsync', '-r', '-d',
      'frontend/dist/',
      'gs://toxindex-react/'
    ]

  # Set cache control headers
  - name: 'gcr.io/cloud-builders/gsutil'
    args: [
      '-m', 'setmeta',
      '-h', 'Cache-Control:no-store',
      'gs://toxindex-react/**'
    ]

  # Invalidate CDN cache
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
      'compute', 'url-maps', 'invalidate-cdn-cache',
      'frontend-url-map',
      '--path', '/*'
    ]

  # ===== VERIFICATION PHASE =====

  # Wait for pods to be ready
  - name: 'gcr.io/cloud-builders/kubectl'
    args: [
      'wait', '--for=condition=ready', 'pod',
      '-l', 'app=backend',
      '-n', 'toxindex-app',
      '--timeout=300s'
    ]
    env:
      - 'CLOUDSDK_COMPUTE_REGION=us-east4'
      - 'CLOUDSDK_CONTAINER_CLUSTER=toxindex-gke'

  # Wait for Celery workers to be ready
  - name: 'gcr.io/cloud-builders/kubectl'
    args: [
      'wait', '--for=condition=ready', 'pod',
      '-l', 'app=celery-worker',
      '-n', 'toxindex-app',
      '--timeout=300s'
    ]
    env:
      - 'CLOUDSDK_COMPUTE_REGION=us-east4'
      - 'CLOUDSDK_CONTAINER_CLUSTER=toxindex-gke'

  # ===== FUNCTIONAL VERIFICATION =====

  # Test basic health check
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Get backend service URL
        BACKEND_SVC_URL=$$(kubectl get svc backend -n toxindex-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$$BACKEND_SVC_URL" ]; then
          echo "Backend service not accessible via LoadBalancer, using cluster IP"
          BACKEND_SVC_URL=$$(kubectl get svc backend -n toxindex-app -o jsonpath='{.spec.clusterIP}')
        fi
        
        echo "Testing backend health at: $$BACKEND_SVC_URL:6513"
        
        # Test basic health check
        curl -f --max-time 30 "http://$$BACKEND_SVC_URL:6513/api/healthz" || exit 1
        
        # Test comprehensive health check
        HEALTH_RESPONSE=$$(curl -s --max-time 60 "http://$$BACKEND_SVC_URL:6513/api/health")
        echo "Health check response: $$HEALTH_RESPONSE"
        
        # Parse health check status
        HEALTH_STATUS=$$(echo "$$HEALTH_RESPONSE" | jq -r '.status')
        if [ "$$HEALTH_STATUS" != "healthy" ]; then
          echo "❌ Health check failed: $$HEALTH_STATUS"
          echo "Full response: $$HEALTH_RESPONSE"
          exit 1
        fi
        
        echo "✅ Health check passed: $$HEALTH_STATUS"
    env:
      - 'CLOUDSDK_COMPUTE_REGION=us-east4'
      - 'CLOUDSDK_CONTAINER_CLUSTER=toxindex-gke'

  # Test frontend accessibility
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Test frontend CDN
        FRONTEND_URL="https://your-frontend-domain.com"  # Replace with your actual domain
        
        echo "Testing frontend at: $$FRONTEND_URL"
        
        # Test frontend accessibility
        FRONTEND_RESPONSE=$$(curl -s --max-time 30 "$$FRONTEND_URL")
        if [ $$? -ne 0 ]; then
          echo "❌ Frontend not accessible"
          exit 1
        fi
        
        # Check if it's a valid HTML response
        if echo "$$FRONTEND_RESPONSE" | grep -q "<!DOCTYPE html\|<html"; then
          echo "✅ Frontend is accessible and serving HTML"
        else
          echo "❌ Frontend response is not valid HTML"
          exit 1
        fi

  # ===== GOOGLE CLOUD MONITORING VERIFICATION =====

  # Wait for metrics to be available (allow time for monitoring to collect data)
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Waiting for Google Cloud Monitoring metrics to be available..."
        sleep 60  # Wait for metrics to be collected
        
        # Get the project number for monitoring API
        PROJECT_NUMBER=$$(gcloud projects describe $PROJECT_ID --format='value(projectNumber)')
        
        # Check if pods are reporting metrics
        echo "Checking pod metrics in Cloud Monitoring..."
        
        # Test monitoring API access
        gcloud monitoring metrics list --filter="metric.type:kubernetes.io/pod" --limit=5 || {
          echo "❌ Cannot access Cloud Monitoring metrics"
          exit 1
        }
        
        echo "✅ Cloud Monitoring is accessible"

  # Verify application metrics are being collected
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Verifying application metrics collection..."
        
        # Check if our application pods are reporting metrics
        POD_METRICS=$$(gcloud monitoring metrics list --filter="metric.type:kubernetes.io/pod AND resource.labels.pod_name:backend" --limit=1)
        
        if [ -z "$$POD_METRICS" ]; then
          echo "❌ No pod metrics found for backend pods"
          exit 1
        fi
        
        echo "✅ Pod metrics are being collected"
        
        # Check container metrics
        CONTAINER_METRICS=$$(gcloud monitoring metrics list --filter="metric.type:kubernetes.io/container" --limit=1)
        
        if [ -z "$$CONTAINER_METRICS" ]; then
          echo "❌ No container metrics found"
          exit 1
        fi
        
        echo "✅ Container metrics are being collected"

  # ===== FUNCTIONAL TESTING =====

  # Test critical application functions
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Testing critical application functions..."
        
        # Get backend service URL
        BACKEND_SVC_URL=$$(kubectl get svc backend -n toxindex-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        if [ -z "$$BACKEND_SVC_URL" ]; then
          BACKEND_SVC_URL=$$(kubectl get svc backend -n toxindex-app -o jsonpath='{.spec.clusterIP}')
        fi
        
        # Test database connectivity (via health check)
        DB_HEALTH=$$(curl -s "http://$$BACKEND_SVC_URL:6513/api/health" | jq -r '.checks.database.status')
        if [ "$$DB_HEALTH" != "healthy" ]; then
          echo "❌ Database connectivity test failed: $$DB_HEALTH"
          exit 1
        fi
        echo "✅ Database connectivity verified"
        
        # Test Redis connectivity
        REDIS_HEALTH=$$(curl -s "http://$$BACKEND_SVC_URL:6513/api/health" | jq -r '.checks.redis.status')
        if [ "$$REDIS_HEALTH" != "healthy" ]; then
          echo "❌ Redis connectivity test failed: $$REDIS_HEALTH"
          exit 1
        fi
        echo "✅ Redis connectivity verified"
        
        # Test GCS connectivity
        GCS_HEALTH=$$(curl -s "http://$$BACKEND_SVC_URL:6513/api/health" | jq -r '.checks.gcs.status')
        if [ "$$GCS_HEALTH" != "healthy" ]; then
          echo "❌ GCS connectivity test failed: $$GCS_HEALTH"
          exit 1
        fi
        echo "✅ GCS connectivity verified"
        
        # Test Celery worker status
        CELERY_HEALTH=$$(curl -s "http://$$BACKEND_SVC_URL:6513/api/health" | jq -r '.checks.celery.status')
        if [ "$$CELERY_HEALTH" != "healthy" ] && [ "$$CELERY_HEALTH" != "warning" ]; then
          echo "❌ Celery worker test failed: $$CELERY_HEALTH"
          exit 1
        fi
        echo "✅ Celery worker status verified"

  # ===== DEPLOYMENT SUMMARY =====

  # Show deployment status and metrics
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "🚀 Deployment Verification Summary"
        echo "================================"
        echo ""
        echo "✅ Backend Deployment:"
        echo "   - Image: us-docker.pkg.dev/$PROJECT_ID/toxindex-backend/backend:latest"
        echo "   - Pods: $$(kubectl get pods -n toxindex-app -l app=backend --no-headers | wc -l) running"
        echo "   - Health: Verified via comprehensive health checks"
        echo ""
        echo "✅ Frontend Deployment:"
        echo "   - Bucket: gs://toxindex-react"
        echo "   - CDN: frontend-url-map"
        echo "   - Accessibility: Verified"
        echo ""
        echo "✅ Cloud Monitoring:"
        echo "   - Metrics collection: Active"
        echo "   - Pod metrics: Available"
        echo "   - Container metrics: Available"
        echo ""
        echo "✅ Function Verification:"
        echo "   - Database connectivity: ✅"
        echo "   - Redis connectivity: ✅"
        echo "   - GCS connectivity: ✅"
        echo "   - Celery workers: ✅"
        echo ""
        echo "🎉 All functions are working! Deployment successful."

# Store images in Artifact Registry
images:
  - 'us-docker.pkg.dev/$PROJECT_ID/toxindex-backend/backend:latest'

# Build options
options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  diskSizeGb: '100'
  env:
    - 'DOCKER_BUILDKIT=1'
    - 'NODE_ENV=production'

 