#!/usr/bin/env bash
set -euo pipefail

# Generate k8s/backend-secrets.yaml from .env at project root

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
ENV_FILE="${PROJECT_ROOT}/.env"
OUTPUT_DIR="${PROJECT_ROOT}/k8s"
OUTPUT_FILE="${OUTPUT_DIR}/backend-secrets.yaml"

if [[ ! -f "${ENV_FILE}" ]]; then
  echo ".env not found at ${ENV_FILE}" >&2
  exit 1
fi

mkdir -p "${OUTPUT_DIR}"

yaml_single_quote_escape() {
  # Escapes single quotes for YAML single-quoted scalars
  # Replaces ' with '' and wraps the whole string in single quotes
  local value="$1"
  value=${value//\'/''}
  printf "'%s'" "$value"
}

trim() {
  # Trim leading/trailing whitespace
  local s="$1"
  # shellcheck disable=SC2001
  s="$(echo "$s" | sed -e 's/^\s\+//' -e 's/\s\+$//')"
  printf "%s" "$s"
}

strip_enclosing_quotes() {
  local s="$1"
  if [[ ( ${#s} -ge 2 ) && ( ( ${s:0:1} == '"' && ${s: -1} == '"' ) || ( ${s:0:1} == "'" && ${s: -1} == "'" ) ) ]]; then
    printf "%s" "${s:1:${#s}-2}"
  else
    printf "%s" "$s"
  fi
}

{
  echo "apiVersion: v1"
  echo "kind: Secret"
  echo "metadata:"
  echo "  name: backend-secrets"
  echo "  namespace: toxindex-app"
  echo "type: Opaque"
  echo "stringData:"

  # Read .env lines and convert to YAML key: value pairs
  while IFS= read -r raw_line || [[ -n "$raw_line" ]]; do
    line="$raw_line"

    # Ignore comments and empty lines
    [[ -z "$(echo "$line" | sed 's/[[:space:]]//g')" ]] && continue
    [[ "$line" =~ ^[[:space:]]*# ]] && continue

    # Support lines like: export KEY=VALUE
    line="$(echo "$line" | sed -E 's/^[[:space:]]*export[[:space:]]+//')"

    # Split on the first '=' only
    if [[ "$line" != *"="* ]]; then
      continue
    fi
    key="${line%%=*}"
    val="${line#*=}"

    key="$(trim "$key")"
    val="$(trim "$val")"

    # Skip invalid keys
    [[ -z "$key" ]] && continue

    # Remove surrounding quotes in values if present (we will re-quote for YAML)
    val="$(strip_enclosing_quotes "$val")"

    # Escape for YAML and print with two-space indentation under stringData
    printf "  %s: %s\n" "$key" "$(yaml_single_quote_escape "$val")"
  done < "$ENV_FILE"
} > "$OUTPUT_FILE"

echo "Wrote ${OUTPUT_FILE}"


