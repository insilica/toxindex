from webserver import login_manager as LM
from webserver.controller import login
from webserver.model.conversation import Conversation
from flask import request, Response, jsonify

import flask, flask_login
import os, logging
from webserver.controller.ai_service import generate_response

# Defining the static folder path
static_folder_path = os.path.join(os.path.dirname(__file__), 'webserver', 'static')
app = flask.Flask(__name__, template_folder="templates")

app.config['SERVER_NAME'] = os.environ.get('SERVER_NAME')
app.config['PREFERRED_URL_SCHEME'] = os.environ.get('PREFERRED_URL_SCHEME')
app.secret_key = os.environ.get('FLASK_APP_SECRET_KEY')
app.logger.setLevel(logging.INFO)
logging.basicConfig(level=logging.DEBUG)

LM.init(app)

@app.route('/', methods=['GET'])
def index():
    if flask_login.current_user.is_authenticated:
        # Get user's conversations or create a new one
        conversations = Conversation.get_conversations_by_user(flask_login.current_user.user_id)
        return flask.render_template('chat.html', conversations=conversations)
    else:
        return flask.render_template('landing.html')

# Login and Registration (keep these routes)
app.route('/register', methods=['GET','POST'])(login.register)
app.route('/verify', methods=['GET'])(login.verify_message)
app.route('/verification/<token>', methods=['GET','POST'])(login.verification)
app.route('/login', methods=['GET','POST'])(login.login)
app.route('/logout', methods=['GET'])(login.logout)
app.route('/forgot_password', methods=['GET','POST'])(login.forgot_password)
app.route('/reset_password/<token>', methods=['GET','POST'])(login.reset_password)

# Chat API routes
@app.route('/conversations', methods=['GET'])
@flask_login.login_required
def get_conversations():
    conversations = Conversation.get_conversations_by_user(flask_login.current_user.user_id)
    return jsonify([conv.to_dict() for conv in conversations])

@app.route('/conversations', methods=['POST'])
@flask_login.login_required
def create_conversation():
    data = request.get_json()
    title = data.get('title', 'New Conversation')
    conversation = Conversation.create_conversation(title, flask_login.current_user.user_id)
    return jsonify(conversation.to_dict())

@app.route('/conversations/<conversation_id>/messages', methods=['POST'])
@flask_login.login_required
def send_message(conversation_id):
    data = request.get_json()
    user_message = data.get('message', '')
    
    # Add user message
    Conversation.add_message(conversation_id, flask_login.current_user.user_id, 'user', user_message)
    
    # Get previous messages for context
    messages = Conversation.get_messages(conversation_id, flask_login.current_user.user_id)
    
    # Generate AI response
    ai_response = generate_response(user_message, messages)
    
    # Save AI response
    Conversation.add_message(conversation_id, flask_login.current_user.user_id, 'assistant', ai_response)
    
    return jsonify({"response": ai_response})

@app.route('/conversations/<conversation_id>', methods=['GET'])
@flask_login.login_required
def get_conversation(conversation_id):
    messages = Conversation.get_messages(conversation_id, flask_login.current_user.user_id)
    return jsonify(messages)

# Serving the favicon
@app.route('/favicon.ico')
def favicon():
    return app.send_static_file('favicon.png')